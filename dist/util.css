@charset "UTF-8";
/**
 * @squirrel-forge/build-scss@0.8.3
 * Root render template
 *  Set $env: null
 *  Set $production: false
 *  Import: ./util.scss;
 */
/**
 * Global reset
 *  A set of basic global reset styles.
 */
/**
 * Generate reset styles
 * @public
 * @output Outputs reset styles
 */
/**
 * Requires
 */
/**
 * Merge config options
 * @public
 * @param {map} $options - Input options map
 * @param {map} $defaults - Default options map
 * @param {boolean} $extend - Allow config extension
 * @param {boolean} $strict - Throws an error with unknown option names
 * @param {string} $error - Error message prefix
 * @return {map} - Map with defaults with merged options
 */
/**
 * Media queries
 *  Helper mixin and configuration.
 */
/**
 * Requires
 */
/**
 * Query defaults
 * @private
 * @type {map}
 */
/**
 * Update/extend media queries
 * @public
 * @param {map} $queries - Map of media queries
 * @output {void} - Only sets or updates media query references
 */
/**
 * Media query wrapper
 * @public
 * @param {string} query - Media name reference
 * @output Wraps given content styles in a media query
 */
/**
 * Requires
 */
/**
 * Get missing default arguments
 * @param {*} $data - Arguments, value or list
 * @param {*} $optional - Any number of optional argument defaults
 * @return {list} - A list with arguments and defaults
 */
/**
 * Requires
 */
/**
 * Split string
 * Thanks to dayenite and Tofandel, please refer to:
 * https://stackoverflow.com/questions/32376461/how-to-split-a-string-into-two-lists-of-numbers-in-sass#42295154
 * @param {string} $string - String to split
 * @param {string} $separator - Separator to split by
 * @param {boolean} $no-empty - Set false to return empty parts, default: true
 * @return {list} - Separated list of strings
 */
/**
 * Requires
 */
/**
 * Get name and query from string
 * @param {string} $name - String to parse
 * @param {string} $query-marker - String that marks the split point, default: '_at_'
 * @param {string} $error - Error message prefix
 * @return {list} - Empty if no query was found
 */
/**
 * Requires
 */
/**
 * Checks if given string is a query reference
 * @param {string} $name - String to parse
 * @param {string} $query-marker - String marking the beginning of a query, default: '_at_'
 * @return {string|null} - Query reference or null if not a query
 */
/**
 * Requires
 */
/**
 * Generate spacing values with a base
 * @param {string|number} $base - Base size including unit or variable
 * @param {number} $spaces - 1-4 values, unitless used for multiplication
 * @return {list} - Spacing values list
 */
/**
 * Requires
 */
/**
 * Returns joined initials of a separated string
 * @param {string} $name - String to parse
 * @param {string} $separator - Separator string
 * @return {string} - First char of each element separated as a joined string
 */
/**
 * Requires
 */
/**
 * Strip unit from value
 * @param {*} $value - Unit value
 * @return {*} - Unitless value
 */
/**
 * Abstracts
 *  functions forwarding index
 */
/**
 * Requires
 */
/**
 * Select current scope only if given attribute is not set or optionally empty
 * @param {string} $attribute - Attribute name
 * @param {boolean} $empty - Include empty attribute
 * @param {string} $error - Error message prefix
 * @output Wraps given content styles to apply only if the current scope element does not have the given attribute or its empty
 */
/**
 * Requires
 */
/**
 * Select current scope only if a given attribute is set
 * @param {string} $attribute - Attribute name, default: 'class'
 * @param {boolean} $empty - Allow empty attribute
 * @param {string} $error - Error message prefix
 * @output Wraps given content styles to apply only if the current scope element has the given attribute
 */
/**
 * Requires
 */
/**
 * Attributes setter
 * @param {Map} $source - Map of attributes
 * @param {string} $error - Error message prefix
 * @output Adds the given attributes in current scope
 */
/**
 * Requires
 */
/**
 * Attributes from map setter
 * @param {string} $name - Name of attribute group
 * @param {Map} $source - Map of attribute groups to use
 * @param {string} $error - Error message prefix
 * @output Adds the given attributes in current scope
 */
/**
 * Requires
 */
/**
 * Fluid style basic setter
 * Creates a fluid font style between a min and max
 * @param {size[unit]} $min-vw - Min query width value
 * @param {size[unit]} $max-vw - Max query width value
 * @param {size[unit]} $min-font-size - Min font size
 * @param {size[unit]} $max-font-size - Max font size
 * @param {null|string} $base-query - Optional name for an @mixin mx-media(name), default: null
 * @param {boolean} $no-max - Do not define max query, default: null
 * @param {string} $error - Error message prefix
 * @output Adds the given font media queries in current scope, with an optional base query
 */
/**
 * Requires
 */
/**
 * Fluid font style setter
 * Adds the given font style attributes and fluid style in current scope
 * @param {string} $style - Name of font style
 * @param {Map} $styles - Map of font styles to use, default: $font-styles
 * @param {string} $base-query - Optional name for an @mixin media.query(name), default: null
 * @param {string} $fluid-attribute - Name of attribute to read fluid properties from, default: 'fluid'
 * @param {string} $no-max-attribute - Name of attribute to for no-max argument, default: 'no-max'
 * @output Adds the given font attributes and media queries in current scope
 */
/**
 * Requires
 */
/**
 * Simple BEM creator
 * @param {map} $nested - BEM map
 * @param {string} $query-marker - String that marks the split point, default: '_at_'
 * @param {string} $error - Error message prefix
 * @output Creates BEM style structures from a map definition
 */
/**
 * Insert a line break before content
 * @output Inserts a pseudo before with a break
 */
/**
 * Insert a line break after content
 * @output Inserts a pseudo after with a break
 */
/**
 * Clear both before
 * @output Inserts a pseudo before with a clear both
 */
/**
 * Clear both after
 * @output Inserts a pseudo after with a clear both
 */
/**
 * Hide an element
 * but leave it accessible to screen readers
 * Reliable across most browsers
 * @output Inserts attributes to hide the current scope visually only
 */
/**
 * Prevent text selection
 * Works across most browsers
 * @output Inserts attributes to prevent text selection
 */
/**
 * Requires
 */
/**
 * Generate custom properties
 * @public
 * @param {map} $props - Map of properties
 * @param {string} $prefix - Property prefix
 * @param {string} $error - Error message prefix
 * @output Adds given custom properties in current scope
 */
/**
 * Allow for language base automatic word breaking
 * Works across most browsers
 * @output Inserts attributes to allow word breaking
 */
/**
 * Mixins
 *  mixins forwarding index
 */
/**
 * ui-colors
 *  Custom properties and styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Component property suffix
 * @protected
 * @type {string} variant suffix
 */
/**
 * Color defaults
 * @private
 * @type {map}
 */
/**
 * Color style attributes
 * @private
 * @type {map}
 */
/**
 * Color variants
 * @private
 * @type {map}
 */
/**
 * Internal generated names
 * @private
 * @type {list}
 */
/**
 * Update colors and variants index
 * @public
 * @param {map} $colors - Map of colors
 * @param {map} $variants - Map of variants
 * @param {map} $attributes - Map of attributes
 * @output {void} - Sets available color references
 */
/**
 * Generate required custom properties
 * @public
 * @output Outputs all custom properties in given context
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured component styles
 */
/**
 * ui-assets
 *  Function with configuration.
 */
/**
 * Asset base path
 * @protected
 * @type {string} url path
 */
/**
 * Asset cache breaker
 * @protected
 * @type {string} url suffix
 */
/**
 * Get asset url
 * @param {string} $asset - Relative asset path
 * @param {string} $base - Optional asset base url
 * @return {url} - Asset url
 */
/**
 * ui-decals
 *  Custom properties and styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component static css suffix
 * @protected
 * @type {string} css class suffix
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Decals default width
 * @protected
 * @type {number} width value
 */
/**
 * Use sizing via width and height property
 * @protected
 * @type {boolean} size via custom properties
 */
/**
 * @typedef {map} Decal - Defines a decal, one before or after key must be set true
 * @key {undefined|boolean} before - Render before pseudo
 * @key {undefined|boolean} after - Render after pseudo
 * @key {number} width - Number unitless
 * @key {number} height - Number unitless
 * @key {string} url - Asset name
 */
/**
 * Decals definitions
 * @private
 * @type {map<string, Decal>}
 */
/**
 * Update component config options
 * @public
 * @param {map} $decals - Map of decal definitions
 * @output {void} - Sets available decals declarations
 */
/**
 * Generate required custom properties
 * @public
 * @output Outputs all custom properties in given context
 */
/**
 * Generate base styles
 * @public
 * @output Outputs configured decal styles as helper classes
 */
/**
 * Images
 *  Submodule forwarding index
 */
/**
 * Icons core
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component parent interactive css class
 * @protected
 * @type {string} css class
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Angles/rotation helper variants
 * @protected
 * @type {list<deg>} list of unitless degrees
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon core styles
 * @public
 * @output Outputs configured icon base styles in given context
 */
/**
 * Icon *
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon arrow-capped
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon arrow-double
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon arrow-small
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon close
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon fullscreen
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component parent interactive css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon important
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon info
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon minimize
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component parent interactive css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon pause
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon play
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon replay
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon siux
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon sound
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon sound-muted
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon sound-none
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon sound-on
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon stop
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon unknown
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icon user
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icons styled
 *  Submodule index
 */
/**
 * Generate required custom properties
 * @public
 * @output Outputs all custom properties in given context
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icons images
 *  Custom properties and styles with configuration
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Sets available image icons
 */
/**
 * Generate required custom properties
 * @public
 * @output Outputs all custom properties in given context
 */
/**
 * Generate icon styles
 * @public
 * @output Outputs configured icon styles in given context
 */
/**
 * Icons
 *  Submodule forwarding index
 */
/**
 * Font style generation
 *  Custom properties and styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component style prefix
 * @protected
 * @type {string} css class sub style separator
 */
/**
 * Component fluid style attribute name
 * @protected
 * @type {string} map key
 */
/**
 * Component fluid style attribute name
 * @protected
 * @type {string} map key
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update font styles index
 * @public
 * @param {map} $styles - Map of font styles
 * @output {void} - Sets available style declarations
 */
/**
 * Render font style in current context
 * @public
 * @param {string} $style - Style name
 * @output Outputs selected font style in given context
 */
/**
 * Generate font styles
 * @public
 * @output Outputs configured font styles as helper classes
 */
/**
 * ui-list normalize
 *  Custom properties and styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured component styles
 */
/**
 * ui-list customize
 *  Custom properties and styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component data property
 * @protected
 * @type {string} property name
 */
/**
 * Component data property
 * @protected
 * @type {string} property name
 */
/**
 * Default counter style
 * @protected
 * @type {string} counter style name
 */
/**
 * Counter suffix
 * @protected
 * @type {string} display suffix
 */
/**
 * Counter space
 * @protected
 * @type {string} spacing after
 */
/**
 * List styles
 * @protected
 * @type {list} list-style
 */
/**
 * List custom styles
 * @protected
 * @type {map<string, list>} custom style
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured component styles
 */
/**
 * List
 *  Submodule forwarding index
 */
/**
 * ui-text accessibility helpers
 *  Helper class definitions.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured accessibility helpers
 */
/**
 * ui-text align
 *  Styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Default text center media queries
 * @protected
 * @type {string} list of query references
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Default text center media queries
 * @protected
 * @type {string} list of query references
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Default text center media queries
 * @protected
 * @type {string} list of query references
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured alignment helper styles
 */
/**
 * ui-text breaks
 *  Styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component class variant suffix
 * @protected
 * @type {string} class suffix
 */
/**
 * Component responsive break mode
 * @protected
 * @type {boolean}
 */
/**
 * Component break css class
 * @protected
 * @type {string} css class
 */
/**
 * Component break wrap css class
 * @protected
 * @type {string} css class
 */
/**
 * Component break wrap css class
 * @protected
 * @type {string} css class
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured break helper styles
 */
/**
 * Text normalize
 *  Custom properties and styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component property prefix
 * @protected
 * @type {string} property name
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate required custom properties
 * @public
 * @output Adds components custom properties in current scope
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured component styles
 */
/**
 * Text
 *  Submodule forwarding index
 */
/**
 * ui-wrap
 *  Custom properties and styles with configuration.
 */
/**
 * Requires
 */
/**
 * Component css class
 * @protected
 * @type {string} css class
 */
/**
 * Component no flex suffix
 * @protected
 * @type {string} class variant
 */
/**
 * Config defaults
 * @private
 * @type {map}
 */
/**
 * Update component config options
 * @public
 * @param {map} $options - Map of config options
 * @output {void} - Only sets config options
 */
/**
 * Generate component styles
 * @public
 * @output Outputs configured component styles
 */
/**
 * Utilities
 *  Modules and submodules forwarding and config
 */
/**
 * Classic utilities setup
 *  Using this stylesheet will reset all the class and property names to match version 0.8.x
 *  Note that this does not match the version 0.8.x output, some changes are introduced by the new structure
 */
/**
 * Configure colors
 */
/**
 * Configure image icons
 */
/**
 * Configure decals
 */
/**
 * Define root variables
 */
:root {
  --text-normalize-headline-margin: 1rem 0;
  --text-normalize-paragraph-margin: 1rem 0;
  --text-normalize-size-adjust: 100%;
  --color-off-white: #fffbf0;
  --color-grey-2: #c2d1d9;
  --color-cerulean: #0081c8;
  --color-pumpkin-orange: #f28503;
  --color-butterscotch: #ffb93e;
  --color-butterscotch-comp: #3e84ff;
  --color-butterscotch-gray: #9f9f9f;
  --color-butterscotch-op-10: rgba(255, 185, 62, 0.1);
  --color-butterscotch-op-20: rgba(255, 185, 62, 0.2);
  --color-butterscotch-op-30: rgba(255, 185, 62, 0.3);
  --color-butterscotch-op-40: rgba(255, 185, 62, 0.4);
  --color-butterscotch-op-50: rgba(255, 185, 62, 0.5);
  --color-butterscotch-op-60: rgba(255, 185, 62, 0.6);
  --color-butterscotch-op-70: rgba(255, 185, 62, 0.7);
  --color-butterscotch-op-80: rgba(255, 185, 62, 0.8);
  --color-butterscotch-op-90: rgba(255, 185, 62, 0.9);
  --color-butterscotch-inv-10: #e6ae4b;
  --color-butterscotch-inv-20: #cca258;
  --color-butterscotch-inv-30: #b39765;
  --color-butterscotch-inv-40: #998b72;
  --color-butterscotch-inv-50: gray;
  --color-butterscotch-inv-60: #66748d;
  --color-butterscotch-inv-70: #4d699a;
  --color-butterscotch-inv-80: #335da7;
  --color-butterscotch-inv-90: #1a52b4;
  --color-butterscotch-inv-100: #0046c1;
  --color-butterscotch-hue-30: #e5ff3e;
  --color-butterscotch-hue-60: #84ff3e;
  --color-butterscotch-hue-90: #3eff59;
  --color-butterscotch-hue-120: #3effb9;
  --color-butterscotch-hue-150: #3ee5ff;
  --color-butterscotch-hue-180: #3e84ff;
  --color-butterscotch-hue-210: #593eff;
  --color-butterscotch-hue-240: #b93eff;
  --color-butterscotch-hue-270: #ff3ee5;
  --color-butterscotch-hue-300: #ff3e84;
  --color-butterscotch-hue-330: #ff593e;
  --color-butterscotch-dk-10: #ffa70b;
  --color-butterscotch-dk-20: #d78900;
  --color-butterscotch-dk-30: #a46900;
  --color-butterscotch-dk-40: #714800;
  --color-butterscotch-dk-50: #3e2800;
  --color-butterscotch-lt-10: #ffcb71;
  --color-butterscotch-lt-20: #ffdea4;
  --color-butterscotch-lt-30: #fff0d7;
  --color-butterscotch-lt-40: white;
  --color-butterscotch-lt-50: white;
  --color-butterscotch-dsat-10: #f5b648;
  --color-butterscotch-dsat-20: #ecb451;
  --color-butterscotch-dsat-30: #e2b15b;
  --color-butterscotch-dsat-40: #d8ae65;
  --color-butterscotch-dsat-50: #cfac6e;
  --color-butterscotch-dsat-60: #c5a978;
  --color-butterscotch-dsat-70: #bba682;
  --color-butterscotch-dsat-80: #b2a48b;
  --color-butterscotch-dsat-90: #a8a195;
  --decal-example-width: 1;
  --decal-example-height: 1;
  --decal-example-url: url("../img/example.jpg?1");
  --decal-example-before-width: 0;
  --decal-example-after-width: 0;
  --icon-color: currentColor;
  --icon-background-color: transparent;
  --icon-transition: 0.3s ease;
  --icon-size: 1;
  --icon-unit: 1.6rem;
  --icon-debug-color: deepskyblue;
  --icon-debug-background-color: deeppink;
  --icon-arrow-height: 0.65;
  --icon-arrow-width: 0.4;
  --icon-arrow-offset: 0.1;
  --icon-arrow-tail-height: 0.25;
  --icon-arrow-tail-width: 0.4;
  --icon-arrow-tail-offset: 0.1;
  --icon-arrow-capped-height: 0.45;
  --icon-arrow-capped-width: 0.25;
  --icon-arrow-capped-offset: 0.1;
  --icon-arrow-capped-tail-height: 0.14;
  --icon-arrow-capped-tail-width: 0.5;
  --icon-arrow-capped-cap-height: 0.4;
  --icon-arrow-capped-cap-width: 0.1;
  --icon-arrow-double-height: 0.45;
  --icon-arrow-double-width: 0.25;
  --icon-arrow-double-offset: 0.1;
  --icon-arrow-double-tail-height: 0.14;
  --icon-arrow-double-tail-width: 0.5;
  --icon-arrow-small-height: 0.45;
  --icon-arrow-small-width: 0.25;
  --icon-arrow-small-offset: 0.15;
  --icon-arrow-small-tail-height: 0.14;
  --icon-arrow-small-tail-width: 0.5;
  --icon-arrow-small-tail-offset: 0.15;
  --icon-close-height: 0.9;
  --icon-close-width: 0.2;
  --icon-fullscreen-height: 0.6;
  --icon-fullscreen-width: 0.4;
  --icon-fullscreen-offset: 0.2;
  --icon-fullscreen-border: 0.1;
  --icon-fullscreen-interactive-offset: 0.1;
  --icon-important-offset: 0.2;
  --icon-important-height: 0.4;
  --icon-important-width: 0.12;
  --icon-important-dot-offset: 0.15;
  --icon-important-dot-height: 0.18;
  --icon-important-dot-width: 0.18;
  --icon-important-dot-radius: 50%;
  --icon-info-offset: 0.15;
  --icon-info-height: 0.42;
  --icon-info-width: 0.12;
  --icon-info-dot-offset: 0.2;
  --icon-info-dot-height: 0.14;
  --icon-info-dot-width: 0.14;
  --icon-info-dot-radius: 50%;
  --icon-minimize-width: 0.16;
  --icon-minimize-height: 0.6;
  --icon-minimize-offset: 0.1;
  --icon-minimize-interactive-offset: 0.2;
  --icon-pause-height: 0.7;
  --icon-pause-width: 0.6;
  --icon-pause-border: 0.23;
  --icon-play-height: 0.8;
  --icon-play-width: 0.65;
  --icon-replay-circle-width: 0.8;
  --icon-replay-circle-height: 0.8;
  --icon-replay-circle-border: 0.14;
  --icon-replay-arrow-height: 2.2;
  --icon-replay-arrow-width: 2.8;
  --icon-replay-arrow-offset-x: -2;
  --icon-replay-arrow-offset-y: -0.295;
  --icon-siux-height: 0.35;
  --icon-siux-width: 0.7;
  --icon-siux-border: 0.14;
  --icon-siux-circle-height: 0.8;
  --icon-siux-circle-width: 1;
  --icon-siux-circle-border: 0.07;
  --icon-sound-height: 0.65;
  --icon-sound-width: 0.4;
  --icon-sound-offset: 0.05;
  --icon-sound-muted-height: 0.3;
  --icon-sound-muted-width: 0.08;
  --icon-sound-none-border: 0.08;
  --icon-sound-none-line: 0.06;
  --icon-sound-on-cap: 0.5;
  --icon-sound-on-border: 0.1;
  --icon-sound-on-offset: 0.15;
  --icon-stop-height: 0.7;
  --icon-stop-width: 0.6;
  --icon-unknown-height: 0.4;
  --icon-unknown-width: 0.6;
  --icon-unknown-inset: 0.15;
  --icon-unknown-tail: 0.2;
  --icon-unknown-offset: 0.37;
  --icon-unknown-border: 0.12;
  --icon-unknown-dot-height: 0.14;
  --icon-unknown-dot-width: 0.14;
  --icon-unknown-dot-radius: 50%;
  --icon-unknown-dot-offset: 0.15;
  --icon-user-height: 0.25;
  --icon-user-width: 0.7;
  --icon-user-radius: 0.4;
  --icon-user-circle-height: 0.45;
  --icon-user-circle-width: 0.45;
  --icon-user-offset: 0.1;
  --icon-image-example-default: url("../img/default.jpg?1");
  --icon-image-extra-default: url("../img/default.jpg?1");
  --icon-image-extra-interactive: url("../img/interactive.jpg?1");
  --list-margin: 1rem 0;
  --list-padding: 0 0 0;
  --list-indent-width: 2rem;
  --list-item-margin: 0;
  --list-item-after-margin: 1rem 0 0;
}

/**
 * Render reset
 */
*, ::before, ::after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  scroll-behavior: smooth;
  min-height: 100vh;
}

*:hover,
*:active,
*:focus {
  outline: none;
}

main, header, footer, section, article, figure, figcaption, fieldset, details, summary {
  display: block;
  margin: 0;
  padding: 0;
}

fieldset {
  border: 0;
}

button, input, select, textarea {
  margin: 0;
  padding: 0;
  font-family: inherit;
  font-size: inherit;
  text-align: inherit;
  color: inherit;
  background-color: transparent;
  border: 0;
}

button, select {
  cursor: pointer;
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}
a:active, a:focus, a:hover, a:visited {
  text-decoration: none;
  outline: none;
}

/**
 * Render text normalize and helpers
 */
html {
  -webkit-text-size-adjust: var(--text-normalize-size-adjust);
     -moz-text-size-adjust: var(--text-normalize-size-adjust);
      -ms-text-size-adjust: var(--text-normalize-size-adjust);
          text-size-adjust: var(--text-normalize-size-adjust);
  text-rendering: optimizeSpeed;
}

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

h1, h2, h3, h4, h5, h6 {
  margin: var(--text-normalize-headline-margin);
}

p {
  margin: var(--text-normalize-paragraph-margin);
}

h1:first-child, h2:first-child, h3:first-child, h4:first-child, h5:first-child, h6:first-child, p:first-child {
  margin-top: 0;
}
h1:last-child, h2:last-child, h3:last-child, h4:last-child, h5:last-child, h6:last-child, p:last-child {
  margin-bottom: 0;
}

.text--hide-a11y {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.text--no-select {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */ /* Konqueror HTML */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
}

.text--center {
  text-align: center;
}
@media screen and (max-width: 767px) {
  .text--center-m {
    text-align: center;
  }
}
@media screen and (max-width: 991px) {
  .text--center-mtp {
    text-align: center;
  }
}
@media screen and (min-width: 768px) and (max-width: 991px) {
  .text--center-tp {
    text-align: center;
  }
}
@media screen and (min-width: 992px) and (max-width: 1024px) {
  .text--center-tl {
    text-align: center;
  }
}
@media screen and (min-width: 768px) and (max-width: 1024px) {
  .text--center-t {
    text-align: center;
  }
}
@media screen and (min-width: 768px) {
  .text--center-td {
    text-align: center;
  }
}
@media screen and (min-width: 992px) {
  .text--center-tld {
    text-align: center;
  }
}
@media screen and (min-width: 1025px) {
  .text--center-d {
    text-align: center;
  }
}
@media screen and (min-width: 1440px) {
  .text--center-dm {
    text-align: center;
  }
}
.text--right {
  text-align: right;
}
@media screen and (max-width: 767px) {
  .text--right-m {
    text-align: right;
  }
}
@media screen and (max-width: 991px) {
  .text--right-mtp {
    text-align: right;
  }
}
@media screen and (min-width: 768px) and (max-width: 991px) {
  .text--right-tp {
    text-align: right;
  }
}
@media screen and (min-width: 992px) and (max-width: 1024px) {
  .text--right-tl {
    text-align: right;
  }
}
@media screen and (min-width: 768px) and (max-width: 1024px) {
  .text--right-t {
    text-align: right;
  }
}
@media screen and (min-width: 768px) {
  .text--right-td {
    text-align: right;
  }
}
@media screen and (min-width: 992px) {
  .text--right-tld {
    text-align: right;
  }
}
@media screen and (min-width: 1025px) {
  .text--right-d {
    text-align: right;
  }
}
@media screen and (min-width: 1440px) {
  .text--right-dm {
    text-align: right;
  }
}
.text--left {
  text-align: left;
}
@media screen and (max-width: 767px) {
  .text--left-m {
    text-align: left;
  }
}
@media screen and (max-width: 991px) {
  .text--left-mtp {
    text-align: left;
  }
}
@media screen and (min-width: 768px) and (max-width: 991px) {
  .text--left-tp {
    text-align: left;
  }
}
@media screen and (min-width: 992px) and (max-width: 1024px) {
  .text--left-tl {
    text-align: left;
  }
}
@media screen and (min-width: 768px) and (max-width: 1024px) {
  .text--left-t {
    text-align: left;
  }
}
@media screen and (min-width: 768px) {
  .text--left-td {
    text-align: left;
  }
}
@media screen and (min-width: 992px) {
  .text--left-tld {
    text-align: left;
  }
}
@media screen and (min-width: 1025px) {
  .text--left-d {
    text-align: left;
  }
}
@media screen and (min-width: 1440px) {
  .text--left-dm {
    text-align: left;
  }
}

.break-rsp br {
  display: none;
}
@media screen and (max-width: 767px) {
  .break-rsp br.break-m {
    display: inline;
  }
}
@media screen and (max-width: 991px) {
  .break-rsp br.break-mtp {
    display: inline;
  }
}
@media screen and (min-width: 768px) and (max-width: 991px) {
  .break-rsp br.break-tp {
    display: inline;
  }
}
@media screen and (min-width: 992px) and (max-width: 1024px) {
  .break-rsp br.break-tl {
    display: inline;
  }
}
@media screen and (min-width: 768px) and (max-width: 1024px) {
  .break-rsp br.break-t {
    display: inline;
  }
}
@media screen and (min-width: 768px) {
  .break-rsp br.break-td {
    display: inline;
  }
}
@media screen and (min-width: 992px) {
  .break-rsp br.break-tld {
    display: inline;
  }
}
@media screen and (min-width: 1025px) {
  .break-rsp br.break-d {
    display: inline;
  }
}
@media screen and (min-width: 1440px) {
  .break-rsp br.break-dm {
    display: inline;
  }
}

.text--break-before::before {
  content: "\a";
  white-space: pre;
}
.text--break-after::after {
  content: "\a";
  white-space: pre;
}
.text--clear-before::before {
  display: block;
  content: "";
  clear: both;
}
.text--clear-after::after {
  display: block;
  content: "";
  clear: both;
}
.text--break-keep br {
  display: inline;
}
.text--no-break {
  white-space: nowrap;
}
.text--wbreak {
  word-break: break-word;
  -webkit-hyphens: auto;
      -ms-hyphens: auto;
          hyphens: auto;
}
@media screen and (max-width: 767px) {
  .text--wbreak-m {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (max-width: 991px) {
  .text--wbreak-mtp {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (min-width: 768px) and (max-width: 991px) {
  .text--wbreak-tp {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (min-width: 992px) and (max-width: 1024px) {
  .text--wbreak-tl {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (min-width: 768px) and (max-width: 1024px) {
  .text--wbreak-t {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (min-width: 768px) {
  .text--wbreak-td {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (min-width: 992px) {
  .text--wbreak-tld {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (min-width: 1025px) {
  .text--wbreak-d {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}
@media screen and (min-width: 1440px) {
  .text--wbreak-dm {
    word-break: break-word;
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
  }
}

/**
 * Render color styles
 */
.color--text-off-white {
  color: var(--color-off-white);
}
.color--text-grey-2 {
  color: var(--color-grey-2);
}
.color--text-cerulean {
  color: var(--color-cerulean);
}
.color--text-pumpkin-orange {
  color: var(--color-pumpkin-orange);
}
.color--text-butterscotch {
  color: var(--color-butterscotch);
}
.color--bg-off-white {
  background-color: var(--color-off-white);
}
.color--bg-grey-2 {
  background-color: var(--color-grey-2);
}
.color--bg-cerulean {
  background-color: var(--color-cerulean);
}
.color--bg-pumpkin-orange {
  background-color: var(--color-pumpkin-orange);
}
.color--bg-butterscotch {
  background-color: var(--color-butterscotch);
}
.color--bg-butterscotch-comp {
  background-color: var(--color-butterscotch-comp);
}
.color--bg-butterscotch-gray {
  background-color: var(--color-butterscotch-gray);
}
.color--bg-butterscotch-op-10 {
  background-color: var(--color-butterscotch-op-10);
}
.color--bg-butterscotch-op-20 {
  background-color: var(--color-butterscotch-op-20);
}
.color--bg-butterscotch-op-30 {
  background-color: var(--color-butterscotch-op-30);
}
.color--bg-butterscotch-op-40 {
  background-color: var(--color-butterscotch-op-40);
}
.color--bg-butterscotch-op-50 {
  background-color: var(--color-butterscotch-op-50);
}
.color--bg-butterscotch-op-60 {
  background-color: var(--color-butterscotch-op-60);
}
.color--bg-butterscotch-op-70 {
  background-color: var(--color-butterscotch-op-70);
}
.color--bg-butterscotch-op-80 {
  background-color: var(--color-butterscotch-op-80);
}
.color--bg-butterscotch-op-90 {
  background-color: var(--color-butterscotch-op-90);
}
.color--bg-butterscotch-inv-10 {
  background-color: var(--color-butterscotch-inv-10);
}
.color--bg-butterscotch-inv-20 {
  background-color: var(--color-butterscotch-inv-20);
}
.color--bg-butterscotch-inv-30 {
  background-color: var(--color-butterscotch-inv-30);
}
.color--bg-butterscotch-inv-40 {
  background-color: var(--color-butterscotch-inv-40);
}
.color--bg-butterscotch-inv-50 {
  background-color: var(--color-butterscotch-inv-50);
}
.color--bg-butterscotch-inv-60 {
  background-color: var(--color-butterscotch-inv-60);
}
.color--bg-butterscotch-inv-70 {
  background-color: var(--color-butterscotch-inv-70);
}
.color--bg-butterscotch-inv-80 {
  background-color: var(--color-butterscotch-inv-80);
}
.color--bg-butterscotch-inv-90 {
  background-color: var(--color-butterscotch-inv-90);
}
.color--bg-butterscotch-inv-100 {
  background-color: var(--color-butterscotch-inv-100);
}
.color--bg-butterscotch-hue-30 {
  background-color: var(--color-butterscotch-hue-30);
}
.color--bg-butterscotch-hue-60 {
  background-color: var(--color-butterscotch-hue-60);
}
.color--bg-butterscotch-hue-90 {
  background-color: var(--color-butterscotch-hue-90);
}
.color--bg-butterscotch-hue-120 {
  background-color: var(--color-butterscotch-hue-120);
}
.color--bg-butterscotch-hue-150 {
  background-color: var(--color-butterscotch-hue-150);
}
.color--bg-butterscotch-hue-180 {
  background-color: var(--color-butterscotch-hue-180);
}
.color--bg-butterscotch-hue-210 {
  background-color: var(--color-butterscotch-hue-210);
}
.color--bg-butterscotch-hue-240 {
  background-color: var(--color-butterscotch-hue-240);
}
.color--bg-butterscotch-hue-270 {
  background-color: var(--color-butterscotch-hue-270);
}
.color--bg-butterscotch-hue-300 {
  background-color: var(--color-butterscotch-hue-300);
}
.color--bg-butterscotch-hue-330 {
  background-color: var(--color-butterscotch-hue-330);
}
.color--bg-butterscotch-dk-10 {
  background-color: var(--color-butterscotch-dk-10);
}
.color--bg-butterscotch-dk-20 {
  background-color: var(--color-butterscotch-dk-20);
}
.color--bg-butterscotch-dk-30 {
  background-color: var(--color-butterscotch-dk-30);
}
.color--bg-butterscotch-dk-40 {
  background-color: var(--color-butterscotch-dk-40);
}
.color--bg-butterscotch-dk-50 {
  background-color: var(--color-butterscotch-dk-50);
}
.color--bg-butterscotch-lt-10 {
  background-color: var(--color-butterscotch-lt-10);
}
.color--bg-butterscotch-lt-20 {
  background-color: var(--color-butterscotch-lt-20);
}
.color--bg-butterscotch-lt-30 {
  background-color: var(--color-butterscotch-lt-30);
}
.color--bg-butterscotch-lt-40 {
  background-color: var(--color-butterscotch-lt-40);
}
.color--bg-butterscotch-lt-50 {
  background-color: var(--color-butterscotch-lt-50);
}
.color--bg-butterscotch-dsat-10 {
  background-color: var(--color-butterscotch-dsat-10);
}
.color--bg-butterscotch-dsat-20 {
  background-color: var(--color-butterscotch-dsat-20);
}
.color--bg-butterscotch-dsat-30 {
  background-color: var(--color-butterscotch-dsat-30);
}
.color--bg-butterscotch-dsat-40 {
  background-color: var(--color-butterscotch-dsat-40);
}
.color--bg-butterscotch-dsat-50 {
  background-color: var(--color-butterscotch-dsat-50);
}
.color--bg-butterscotch-dsat-60 {
  background-color: var(--color-butterscotch-dsat-60);
}
.color--bg-butterscotch-dsat-70 {
  background-color: var(--color-butterscotch-dsat-70);
}
.color--bg-butterscotch-dsat-80 {
  background-color: var(--color-butterscotch-dsat-80);
}
.color--bg-butterscotch-dsat-90 {
  background-color: var(--color-butterscotch-dsat-90);
}
.color--bdr-grey-2 {
  border-color: var(--color-grey-2);
}
.color--bdr-cerulean {
  border-color: var(--color-cerulean);
}
.color--bdr-pumpkin-orange {
  border-color: var(--color-pumpkin-orange);
}
.color--bdr-butterscotch {
  border-color: var(--color-butterscotch);
}
.color--bdr-butterscotch-comp {
  border-color: var(--color-butterscotch-comp);
}

/**
 * Render decal styles
 */
.decals {
  position: static;
}
.decals:not(.decals--static) {
  position: relative;
}
.decals::before, .decals::after {
  position: absolute;
  background-position: left top;
  background-repeat: no-repeat;
  background-size: 100% 100%;
  content: "";
}
.decals--example-before::before {
  width: var(--decal-example-before-width);
  background-image: var(--decal-example-url);
  padding-bottom: calc(1 * var(--decal-example-before-width));
}
.decals--example-after::after {
  width: var(--decal-example-after-width);
  background-image: var(--decal-example-url);
  padding-bottom: calc(1 * var(--decal-example-after-width));
}

/**
 * Render icon styles
 */
.icon {
  position: relative;
  display: block;
  width: calc(var(--icon-size) * var(--icon-unit));
  height: calc(var(--icon-size) * var(--icon-unit));
  background-color: var(--icon-background-color);
  overflow: hidden;
  text-indent: -999px;
  -webkit-transition: var(--icon-transition);
  transition: var(--icon-transition);
}
.ui-interactive .icon {
  -webkit-transition: inherit;
  transition: inherit;
}
.icon--inline {
  display: inline-block;
}
.icon--rotate-45 {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
}
.icon--rotate-90 {
  -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
}
.icon--rotate-135 {
  -webkit-transform: rotate(135deg);
          transform: rotate(135deg);
}
.icon--rotate-180 {
  -webkit-transform: rotate(180deg);
          transform: rotate(180deg);
}
.icon--rotate-225 {
  -webkit-transform: rotate(225deg);
          transform: rotate(225deg);
}
.icon--rotate-270 {
  -webkit-transform: rotate(270deg);
          transform: rotate(270deg);
}
.icon--rotate-315 {
  -webkit-transform: rotate(315deg);
          transform: rotate(315deg);
}
.icon--flip-x {
  -webkit-transform: scale(-1, 1);
          transform: scale(-1, 1);
}
.icon--flip-y {
  -webkit-transform: scale(1, -1);
          transform: scale(1, -1);
}
.icon--flip-x.icon--flip-y {
  -webkit-transform: scale(-1, -1);
          transform: scale(-1, -1);
}
.icon:not(.icon--img) span,
.icon:not(.icon--img) span::before,
.icon:not(.icon--img) span::after, .icon:not(.icon--img)::before, .icon:not(.icon--img)::after {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  content: "";
  -webkit-transition: inherit;
  transition: inherit;
}
.icon--img::before, .icon--img::after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: contain;
  content: "";
  opacity: 1;
  -webkit-transition: inherit;
  transition: inherit;
}
.icon--img::before {
  opacity: 1;
  background-image: var(--icon-image-default);
}
.icon--img::after {
  opacity: 0;
  background-image: var(--icon-image-interactive);
}
.ui-interactive:hover .icon--img::before, .ui-interactive:focus .icon--img::before {
  opacity: 0;
}
.ui-interactive:hover .icon--img::after, .ui-interactive:focus .icon--img::after {
  opacity: 1;
}
.debug-css .icon {
  --icon-color: var(--icon-debug-color) !important;
  --icon-background-color: var(--icon-debug-background-color) !important;
}

.icon[data-icon=arrow]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-tail-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-tail-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-tail-width));
  background-color: var(--icon-color);
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
}
.icon[data-icon=arrow]::after {
  left: auto;
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-offset));
  width: 0;
  height: 0;
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-height) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-height) / 2) solid transparent;
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-width)) solid var(--icon-color);
}

.icon[data-icon=arrow-capped] span:first-child {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-tail-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-tail-width));
  background-color: var(--icon-color);
}
.icon[data-icon=arrow-capped]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-offset));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-cap-width));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-cap-height));
  background-color: var(--icon-color);
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
}
.icon[data-icon=arrow-capped]::after {
  left: auto;
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-offset));
  width: 0;
  height: 0;
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-height) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-height) / 2) solid transparent;
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-capped-width)) solid var(--icon-color);
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
}

.icon[data-icon=arrow-double] span:first-child {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-tail-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-tail-width));
  background-color: var(--icon-color);
}
.icon[data-icon=arrow-double]::before, .icon[data-icon=arrow-double]::after {
  width: 0;
  height: 0;
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-height) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-height) / 2) solid transparent;
}
.icon[data-icon=arrow-double]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-offset));
  border-right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-width)) solid var(--icon-color);
}
.icon[data-icon=arrow-double]::after {
  left: auto;
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-offset));
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-double-width)) solid var(--icon-color);
}

.icon[data-icon=arrow-small]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-small-tail-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-small-tail-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-small-tail-width));
  background-color: var(--icon-color);
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
}
.icon[data-icon=arrow-small]::after {
  left: auto;
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-small-offset));
  width: 0;
  height: 0;
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-small-height) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-small-height) / 2) solid transparent;
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-arrow-small-width)) solid var(--icon-color);
}

.icon[data-icon=close]::before, .icon[data-icon=close]::after {
  top: calc((var(--icon-size) * var(--icon-unit) - var(--icon-size) * var(--icon-unit) * var(--icon-close-height)) / 2);
  left: calc((var(--icon-size) * var(--icon-unit) - var(--icon-size) * var(--icon-unit) * var(--icon-close-width)) / 2);
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-close-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-close-width));
  background-color: var(--icon-color);
}
.icon[data-icon=close]::before {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
}
.icon[data-icon=close]::after {
  -webkit-transform: rotate(-45deg);
          transform: rotate(-45deg);
}

.icon[data-icon=fullscreen]::before, .icon[data-icon=fullscreen]::after {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-width) / 2);
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-border)) solid var(--icon-color);
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-border)) solid var(--icon-color);
}
.icon[data-icon=fullscreen]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-offset));
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-border)) solid var(--icon-color);
}
.icon[data-icon=fullscreen]::after {
  left: auto;
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-offset));
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  border-right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-border)) solid var(--icon-color);
}
.ui-interactive:hover .icon[data-icon=fullscreen]::before, .ui-interactive:focus .icon[data-icon=fullscreen]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-interactive-offset));
}
.ui-interactive:hover .icon[data-icon=fullscreen]::after, .ui-interactive:focus .icon[data-icon=fullscreen]::after {
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-fullscreen-interactive-offset));
}

.icon[data-icon=important]::before {
  top: auto;
  bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-dot-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-dot-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-dot-width));
  border-radius: var(--icon-important-dot-radius);
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}
.icon[data-icon=important] span {
  top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-width));
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}
.icon[data-icon=important] span::before, .icon[data-icon=important] span::after {
  top: 0;
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-width) / 2) solid transparent;
  border-right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-width) / 2) solid transparent;
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-important-height)) solid var(--icon-color);
  height: 0;
  width: 0;
}
.icon[data-icon=important] span::before {
  left: 0;
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}
.icon[data-icon=important] span::after {
  left: auto;
  right: 0;
  -webkit-transform: translate(50%, 0);
          transform: translate(50%, 0);
}

.icon[data-icon=info]::before {
  top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-info-dot-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-info-dot-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-info-dot-width));
  border-radius: var(--icon-info-dot-radius);
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}
.icon[data-icon=info]::after {
  top: auto;
  bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-info-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-info-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-info-width));
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}

.icon[data-icon=minimize]::before, .icon[data-icon=minimize]::after {
  width: 0;
  height: 0;
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-height) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-height) / 2) solid transparent;
}
.icon[data-icon=minimize]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-offset));
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-width)) solid var(--icon-color);
}
.icon[data-icon=minimize]::after {
  left: auto;
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-offset));
  border-right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-width)) solid var(--icon-color);
}
.ui-interactive:hover .icon[data-icon=minimize]::before, .ui-interactive:focus .icon[data-icon=minimize]::before {
  left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-interactive-offset));
}
.ui-interactive:hover .icon[data-icon=minimize]::after, .ui-interactive:focus .icon[data-icon=minimize]::after {
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-minimize-interactive-offset));
}

.icon[data-icon=pause]::after {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-pause-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-pause-width));
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-pause-border)) solid var(--icon-color);
  border-right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-pause-border)) solid var(--icon-color);
}

.icon[data-icon=play]::after {
  width: 0;
  height: 0;
  -webkit-transform: translate(-40%, -50%);
          transform: translate(-40%, -50%);
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-play-height) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-play-height) / 2) solid transparent;
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-play-width)) solid var(--icon-color);
}

.icon[data-icon=replay]::before {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-width));
  border-radius: 50%;
  border: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-border)) solid var(--icon-color);
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 50% 50%);
          clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 50% 50%);
}
.icon[data-icon=replay]::after {
  margin-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-border) * var(--icon-replay-arrow-offset-x));
  margin-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-border) * var(--icon-replay-arrow-offset-y));
  width: 0;
  height: 0;
  -webkit-transform-origin: center center;
          transform-origin: center center;
  -webkit-transform: rotate(-45deg) translate(-50%, -50%);
          transform: rotate(-45deg) translate(-50%, -50%);
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-border) * var(--icon-replay-arrow-width) / 2) solid transparent;
  border-right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-border) * var(--icon-replay-arrow-width) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-replay-circle-border) * var(--icon-replay-arrow-height)) solid var(--icon-color);
}

.icon[data-icon=siux]::before, .icon[data-icon=siux]::after {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-siux-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-siux-width));
  border-radius: 50%;
  border: calc(var(--icon-size) * var(--icon-unit) * var(--icon-siux-border)) solid var(--icon-color);
}
.icon[data-icon=siux]::before {
  margin-top: calc((var(--icon-size) * var(--icon-unit) * var(--icon-siux-height) - var(--icon-size) * var(--icon-unit) * var(--icon-siux-border)) * -0.5);
  -webkit-clip-path: polygon(0 0, 100% 0, 65% 50%, 75% 50%, 100% 25%, 100% 50%, 50% 50%, 50% 100%, 0 100%);
          clip-path: polygon(0 0, 100% 0, 65% 50%, 75% 50%, 100% 25%, 100% 50%, 50% 50%, 50% 100%, 0 100%);
}
.icon[data-icon=siux]::after {
  margin-top: calc((var(--icon-size) * var(--icon-unit) * var(--icon-siux-height) - var(--icon-size) * var(--icon-unit) * var(--icon-siux-border)) * 0.5);
  -webkit-clip-path: polygon(50% 50%, 50% 0, 100% 0, 100% 100%, 0 100%, 35% 50%, 25% 50%, 0 75%, 0 50%);
          clip-path: polygon(50% 50%, 50% 0, 100% 0, 100% 100%, 0 100%, 35% 50%, 25% 50%, 0 75%, 0 50%);
}
.icon[data-icon=siux] span:first-child {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-siux-circle-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-siux-circle-width));
  border: calc(var(--icon-size) * var(--icon-unit) * var(--icon-siux-circle-border)) solid var(--icon-color);
  border-radius: 50%;
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%, 0 45%, 100% 45%, 100% 55%, 0 55%, 0 65%, 100% 65%, 100% 100%, 0 100%);
          clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%, 0 45%, 100% 45%, 100% 55%, 0 55%, 0 65%, 100% 65%, 100% 100%, 0 100%);
}

.icon[data-icon^=sound] span:first-child::before {
  left: calc(50% - var(--icon-size) * var(--icon-unit) * var(--icon-sound-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-height) / 2);
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-width));
  background-color: var(--icon-color);
}
.icon[data-icon^=sound] span:first-child::after {
  left: calc(50% - var(--icon-size) * var(--icon-unit) * var(--icon-sound-offset));
  width: 0;
  height: 0;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-height) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-height) / 2) solid transparent;
  border-right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-width)) solid var(--icon-color);
}

.icon[data-icon=sound-muted]::before, .icon[data-icon=sound-muted]::after {
  top: calc((var(--icon-size) * var(--icon-unit) - var(--icon-size) * var(--icon-unit) * var(--icon-sound-muted-height)) / 2);
  left: calc(50% + var(--icon-size) * var(--icon-unit) * var(--icon-sound-width) / 2 + var(--icon-size) * var(--icon-unit) * var(--icon-sound-muted-width));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-muted-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-muted-width));
  background-color: var(--icon-color);
}
.icon[data-icon=sound-muted]::before {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
}
.icon[data-icon=sound-muted]::after {
  -webkit-transform: rotate(-45deg);
          transform: rotate(-45deg);
}

.icon[data-icon=sound-none]::before {
  width: inherit;
  height: inherit;
  border-radius: 50%;
  border: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-none-border)) solid var(--icon-color);
}
.icon[data-icon=sound-none]::after {
  height: 100%;
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-none-line));
  -webkit-transform: translate(-50%, -50%) rotate(-45deg);
          transform: translate(-50%, -50%) rotate(-45deg);
  background-color: var(--icon-color);
}

.icon[data-icon=sound-on]::before {
  left: auto;
  right: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-on-offset));
  border-top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-on-cap) / 2) solid transparent;
  border-bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-on-cap) / 2) solid transparent;
  border-left: calc(var(--icon-size) * var(--icon-unit) * var(--icon-sound-on-border)) solid var(--icon-color);
}

.icon[data-icon=stop]::after {
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-stop-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-stop-width));
  background-color: var(--icon-color);
}

.icon[data-icon=unknown]::before {
  top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-inset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-width));
  border-radius: 50%;
  border: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-border)) solid var(--icon-color);
  -webkit-clip-path: polygon(50% 50%, 0 25%, 0 0, 100% 0, 100% 100%, 50% 100%, 50% 50%);
          clip-path: polygon(50% 50%, 0 25%, 0 0, 100% 0, 100% 100%, 50% 100%, 50% 50%);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}
.icon[data-icon=unknown]::after {
  top: auto;
  bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-tail));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-border));
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}
.icon[data-icon=unknown] span {
  width: inherit;
  height: inherit;
}
.icon[data-icon=unknown] span::after {
  top: auto;
  bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-dot-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-dot-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-unknown-dot-width));
  border-radius: var(--icon-unknown-dot-radius);
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}

.icon[data-icon=user]::before {
  top: auto;
  bottom: calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-width));
  border-radius: calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-radius)) calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-radius)) 0 0;
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}
.icon[data-icon=user]::after {
  top: calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-offset));
  height: calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-circle-height));
  width: calc(var(--icon-size) * var(--icon-unit) * var(--icon-user-circle-width));
  border-radius: 50%;
  background-color: var(--icon-color);
  -webkit-transform: translate(-50%, 0);
          transform: translate(-50%, 0);
}

.icon--img[data-icon=example] {
  --icon-image-default: var(--icon-image-example-default);
}
.icon--img[data-icon=extra] {
  --icon-image-default: var(--icon-image-extra-default);
  --icon-image-interactive: var(--icon-image-extra-interactive);
}

/**
 * Render list styles
 */
ol[class=""], ol:not([class]), ul[class=""], ul:not([class]) {
  margin: var(--list-margin);
  padding: var(--list-padding) var(--list-indent-width);
}
ol[class=""] li, ol:not([class]) li, ul[class=""] li, ul:not([class]) li {
  margin: var(--list-item-margin);
}
ol[class=""] li + li, ol:not([class]) li + li, ul[class=""] li + li, ul:not([class]) li + li {
  margin: var(--list-item-after-margin);
}

ol[data-counter] {
  list-style: none;
  margin: var(--list-margin);
  padding: var(--list-padding) var(--list-indent-width);
  counter-reset: ui-ol-counter;
}
ol[data-counter] > li {
  position: relative;
  margin: var(--list-item-margin);
  counter-increment: ui-ol-counter;
}
ol[data-counter] > li::before {
  position: absolute;
  margin: 0 0 0 calc(var(--list-indent-width) * -1);
  width: var(--list-indent-width);
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
  color: inherit;
  text-align: right;
  content: counter(ui-ol-counter, decimal) ". ";
}
ol[data-counter] > li + li {
  margin: var(--list-item-after-margin);
}
ol[data-counter=decimal] > li::before {
  content: counter(ui-ol-counter, decimal) ". ";
}
ol[data-counter=decimal-leading-zero] > li::before {
  content: counter(ui-ol-counter, decimal-leading-zero) ". ";
}
ol[data-counter=lower-roman] > li::before {
  content: counter(ui-ol-counter, lower-roman) ". ";
}
ol[data-counter=lower-alpha] > li::before {
  content: counter(ui-ol-counter, lower-alpha) ". ";
}
ol[data-counter=upper-alpha] > li::before {
  content: counter(ui-ol-counter, upper-alpha) ". ";
}
ol[data-counter=lower-latin] > li::before {
  content: counter(ui-ol-counter, lower-latin) ". ";
}
ol[data-counter=example] > li:nth-child(1)::before {
  content: "a1 ";
}
ol[data-counter=example] > li:nth-child(2)::before {
  content: "a2 ";
}
ol[data-counter=example] > li:nth-child(3)::before {
  content: "a3 ";
}
ol[data-counter=example] > li:nth-child(4)::before {
  content: "a4 ";
}
ol[data-counter=example] > li:nth-child(5)::before {
  content: "b1 ";
}
ol[data-counter=example] > li:nth-child(6)::before {
  content: "b2 ";
}
ol[data-counter=example] > li:nth-child(7)::before {
  content: "b3 ";
}
ol[data-counter=example] > li:nth-child(8)::before {
  content: "b4 ";
}
ol[data-counter=example] > li:nth-child(9)::before {
  content: "c1 ";
}
ol[data-counter=example] > li:nth-child(10)::before {
  content: "c2 ";
}
ol[data-counter=example] > li:nth-child(11)::before {
  content: "c3 ";
}
ol[data-counter=example] > li:nth-child(12)::before {
  content: "c4 ";
}

/**
 * Render font styles
 */
.font--default {
  font-family: Oxygen, sans-serif;
  font-size: 14px;
  line-height: 1.33;
}
.font--headline {
  font-size: 30px;
  font-weight: bold;
}
@media screen and (max-width: 374px) {
  .font--headline {
    font-size: 20px;
  }
}
@media screen and (min-width: 768px) and (max-width: 1024px) {
  .font--headline {
    font-size: 40px;
  }
}
@media screen and (min-width: 1025px) {
  .font--headline {
    font-size: 40px;
  }
}
@media screen and (min-width: 1366px) {
  .font--headline {
    font-size: 50px;
  }
}
.font--headline-fluid {
  font-weight: bold;
}
@media screen and (max-width: 767px) {
  .font--headline-fluid {
    font-size: 20px;
  }
}
@media screen and (min-width: 320px) {
  .font--headline-fluid {
    font-size: calc(20px + 10 * ((100vw - 320px) / 447));
  }
}
@media screen and (min-width: 768px) and (max-width: 1024px) {
  .font--headline-fluid {
    font-size: 30px;
  }
}
@media screen and (min-width: 768px) {
  .font--headline-fluid {
    font-size: calc(30px + 5 * ((100vw - 768px) / 256));
  }
}
@media screen and (min-width: 1025px) {
  .font--headline-fluid {
    font-size: 35px;
  }
}
@media screen and (min-width: 1025px) {
  .font--headline-fluid {
    font-size: calc(35px + 15 * ((100vw - 1025px) / 341));
  }
}
@media screen and (min-width: 1366px) {
  .font--headline-fluid {
    font-size: 50px;
  }
}

/**
 * Render wrap styles
 */
.wrap {
  margin: auto;
  width: 100%;
}
.wrap:not(.wrap--no-flex) {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
}
.wrap--section {
  position: relative;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  padding: 0 1rem;
}
@media screen and (min-width: 768px) {
  .wrap--section {
    max-width: calc(100% - 2rem);
  }
}
.wrap--content {
  position: relative;
  max-width: 380px;
}
@media screen and (max-width: 374px) {
  .wrap--content {
    max-width: 300px;
  }
}
@media screen and (min-width: 768px) and (max-width: 991px) {
  .wrap--content {
    max-width: 720px;
  }
}
@media screen and (min-width: 992px) {
  .wrap--content {
    max-width: 1000px;
  }
}
@media screen and (min-width: 1366px) {
  .wrap--content {
    max-width: 1200px;
  }
}
.wrap--content-before {
  position: relative;
  margin: 0 auto 2rem;
}
.wrap--content-main {
  position: relative;
}
.wrap--content-after {
  position: relative;
  margin: 2rem auto 0;
}