/**
 * Requires
 */
@use "sass:list";
@use "sass:map";
@use "sass:string";

/**
 * Color helpers
 */
@if $with-util and $util-color {

  /**
   * Color css variables including variants
   */
  $generated-color-names: ();
  :root {
    @each $name, $data in $colors {

      // Get color and variants
      $data: fn-dynamic-default-args($data, ());
      $color: list.nth($data, 1);
      $variants: list.nth($data, 2);

      // Default color
      $cname: --color-#{$name};
      #{$cname}: #{$color};
      $generated-color-names: list.append($generated-color-names, $cname);

      // Complement
      @if index($variants, complement) {
        $cname: --color-#{$name}-#{$util-color-variant-complement};
        #{$cname}: #{complement($color)};
        $generated-color-names: list.append($generated-color-names, $cname);
      }

      // Grayscale
      @if index($variants, grayscale) {
        $cname: --color-#{$name}-#{$util-color-variant-grayscale};
        #{$cname}: #{grayscale($color)};
        $generated-color-names: list.append($generated-color-names, $cname);
      }

      // Alpha variants
      @if index($variants, alpha) {
        $vals: map-get($color-styles, alpha);
        @each $val in $vals {
          $cname: --color-#{$name}-#{$util-color-variant-alpha}-#{$val * 100};
          #{$cname}: #{rgba($color, $val)};
          $generated-color-names: list.append($generated-color-names, $cname);
        }
      }

      // Inversion variants
      @if index($variants, invert) {
        $vals: map-get($color-styles, invert);
        @each $val in $vals {
          $cname: --color-#{$name}-#{$util-color-variant-invert}-#{fn-strip-unit($val)};
          #{$cname}: #{invert($color, $val)};
          $generated-color-names: list.append($generated-color-names, $cname);
        }
      }

      // Hue variants
      @if index($variants, adjust-hue) {
        $vals: map-get($color-styles, adjust-hue);
        @each $val in $vals {
          $cname: --color-#{$name}-#{$util-color-variant-adjust-hue}-#{fn-strip-unit($val)};
          #{$cname}: #{adjust-hue($color, $val)};
          $generated-color-names: list.append($generated-color-names, $cname);
        }
      }

      // Darken variants
      @if index($variants, darken) {
        $vals: map-get($color-styles, darken);
        @each $val in $vals {
          $cname: --color-#{$name}-#{$util-color-variant-darken}-#{fn-strip-unit($val)};
          #{$cname}: #{darken($color, $val)};
          $generated-color-names: list.append($generated-color-names, $cname);
        }
      }

      // Lighten variants
      @if index($variants, lighten) {
        $vals: map-get($color-styles, lighten);
        @each $val in $vals {
          $cname: --color-#{$name}-#{$util-color-variant-lighten}-#{fn-strip-unit($val)};
          #{$cname}: #{lighten($color, $val)};
          $generated-color-names: list.append($generated-color-names, $cname);
        }
      }

      // Saturate variants
      @if index($variants, saturate) {
        $vals: map-get($color-styles, saturate);
        @each $val in $vals {
          $cname: --color-#{$name}-#{$util-color-variant-saturate}-#{fn-strip-unit($val)};
          #{$cname}: #{saturate($color, $val)};
          $generated-color-names: list.append($generated-color-names, $cname);
        }
      }

      // Desaturate variants
      @if index($variants, desaturate) {
        $vals: map-get($color-styles, desaturate);
        @each $val in $vals {
          $cname: --color-#{$name}-#{$util-color-variant-desaturate}-#{fn-strip-unit($val)};
          #{$cname}: #{desaturate($color, $val)};
          $generated-color-names: list.append($generated-color-names, $cname);
        }
      }
    }
  }

  /**
   * Color utilities
   */
  @if $util-color-only == false {

    /**
     * Color definitions
     */
    .#{$util-prefix}#{$util-color-class} {
      $color-attributes: map.get($color-styles, 'attr');
      @each $style, $data in $color-attributes {

        // Set the name as sub type
        &--#{$style} {

          // Get attribute name and color/variant limits
          $data: fn-dynamic-default-args($data, ());
          $attr: list.nth($data, 1);
          $limit: list.nth($data, 2);
          @if list.index($limit, base-only) {
            $limit: map.keys($colors);
          }

          @each $color in $generated-color-names {
            $prefix: --color-;
            $variant-name: string.slice($color, string.length($prefix) + 1);
            @if list.length($limit) == 0 or list.length($limit) > 0 and list.index($limit, $variant-name) {
              &-#{$variant-name} {
                #{$attr}: var(#{$color});
              }
            }
          }
        }
      }
    }
  }
}
