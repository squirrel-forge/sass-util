/**
 * Requires
 */
@use "sass:meta";
@use "sass:list";
@use "sass:map";

/**
 * Fluid font style setter
 * Adds the given font style attributes and fluid style in current scope
 * @param {string} $style - Name of font style
 * @param {string} $base-query - Optional name for an @mixin mx-media(name), default: null
 * @param {Map} $styles - Map of font styles to use, default: $font-styles
 * @param {string} $fluid-attribute - Name of attribute to read fluid properties from, default: 'fluid' = $util-font-fluid-attribute
 * @param {string} $no-max-attribute - Name of attribute to for no-max argument, default: 'no-max' = $util-font-no-max-attribute
 * @output Adds the given font attributes and media queries in current scope
 */
@mixin mx-font-fluid($style, $base-query: null, $styles: $font-styles, $fluid-attribute: $util-font-fluid-attribute, $no-max-attribute: $util-font-no-max-attribute) {

  // Get base query if not set
  @if $base-query == null {
    $has-query: fn-has-query($style);
    @if list.length($has-query) > 1 {
      $base-query: list.nth($has-query, 2);
    }
  }

  // Styles must be a map
  @if meta.type-of($styles) == map {

    // Style is defined
    @if map.has-key($styles, $style) {

      // Style must be a map
      $map: map.get($styles, $style);
      @if meta.type-of($map) == map {
        $no-max: false;
        @if map.has-key($map, $no-max-attribute) {
          $no-max: map.get($map, $no-max-attribute);
        }

        // Cycle style attributes
        @each $attribute, $value in $map {

          // The limits attribute defines the fluid style
          @if $attribute == $fluid-attribute {
            @include mx-font-fluid-base(
              map.get($value, 'min-vw'),
              map.get($value, 'max-vw'),
              map.get($value, 'min-size'),
              map.get($value, 'max-size'),
              $base-query,
              $no-max
            )

          // Set base attributes
          } @else if $attribute != $no-max-attribute {
            #{$attribute}: $value;
          }
        }
      } @else {
        @error 'mx-font-fluid::$style[#{$style}] must be a map of attributes';
      }
    } @else {
      @error 'mx-font-fluid::$style[#{$style}] is not defined';
    }
  } @else {
    @error 'mx-font-fluid::$styles must be a map';
  }
}
