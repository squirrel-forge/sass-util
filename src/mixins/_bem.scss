/**
 * Requires
 */
@use "sass:meta";
@use "sass:list";

/**
 * Simple BEM creator
 * @param {map} $nested - BEM map
 * @param {string} $query-marker - String that marks the split point, default: '_at_'
 * @output Creates BEM style structures from a map definition
 */
@mixin mx-bem($nested, $query-marker: $media-query-marker) {

  // Must be a map
  @if meta.type-of($nested) == map {
    @each $name, $data in $nested {

      // If the value is a map we iterate down
      @if meta.type-of($data) == map {

        // Name is a media query
        $query: fn-is-query($name, $query-marker);
        @if $query {
          @include mx-media($query) {
            @include mx-bem($data);
          }
        } @else {

          // Name is combined with media query
          $combined: fn-has-query($name, $query-marker);
          @if list.length($combined) > 1 {

            // Set name and query
            &#{list.nth($combined, 1)} {
              @include mx-media(list.nth($combined, 2)) {
                @include mx-bem($data);
              }
            }
          } @else {

            // Default nesting
            &#{$name} {
              @include mx-bem($data);
            }
          }
        }
      } @else {

        // Refer to font style
        @if $name == 'use-font' {
          @include mx-font($data);

          // Refer to fluid font style
        } @else if $name == 'use-fluid' {
          @include mx-font-fluid($data);

          // Refer to custom map variable with attribute references
        } @else if $name == 'use-attr' {

          // Check for valid data
          @if meta.type-of($data) == list and list.length($data) == 2 {

            // Attribute reference must be a string
            @if meta.type-of(list.nth($data, 1)) == string {

              // Any further errors are handled by the mixin
              @include mx-attr-set-map(list.nth($data, 1), list.nth($data, 2));
            } @else {
              @error('mx-bem::$name[use-attr] first value must be a string');
            }
          } @else {
            @error('mx-bem::$name[use-attr] must be a list with 2 values');
          }
        } @else {

          // If not, assume a regular attribute value
          #{$name}: $data;
        }
      }
    }
  } @else {
    @error 'mx-bem::$nested[#{meta.type-of($nested)}] must be a map';
  }
}
